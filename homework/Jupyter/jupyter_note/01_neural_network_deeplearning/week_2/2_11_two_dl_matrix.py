import numpy as np# 2.15 Boradcasting in pythonA = np.mat([[56.0, 0.0, 4.4, 68.0],            [1.2, 104.0, 52.0, 8.0],            [1.8, 135.0, 99.0, 0.9]])print(A)# axis=0 代表竖直方向相加cal = A.sum(axis=0)print(cal)# [[  59.   239.   155.4   76.9]]# print("cal.reshape(1,4)",cal.reshape(1,4))# A/cal 相当于（换算百分比） 100* （56/59） = 94.915 # A 矩阵中的每一个元素，与当前所在列的总和相除# cal 根据上面的计算本身就是 1 *4 矩阵，所以cal.reshape(1,4) 这个可以不用percentage = 100 * A / (cal.reshape(1, 4))print('percentage=', percentage)# [[ 94.91525424   0.           2.83140283  88.42652796]#  [  2.03389831  43.51464435  33.46203346  10.40312094]#  [  3.05084746  56.48535565  63.70656371   1.17035111]]# 2.16 A note on python/numpy vectors# 产生随机 5 个高斯变量存储在 a 中# 官方文档中给出的用法是：numpy.random.rand(d0,d1,…dn) # 以给定的形状创建一个数组，数组元素来符合标准正态分布N(0,1) # 若要获得一般正态分布N(μ,σ^2) 描述则可用sigma * np.random.randn(…) + mu进行表示 a = np.random.randn(5)print('a=', a)# [-0.23427061 -0.79637413 -0.06117785  0.15440186 -1.43061057]# a 的大小 print(a.shape)# (5,)# a 的转置 ，这只是秩 为 1 的数组print(a.T)# [-0.5694968  -0.23773807 -0.08906264  0.87211753 -0.08380342]# a 和 a 转置的内积print(np.dot(a, a.T))# 1.15639015502# 因为 a.shape (5,) 不规范# tips tricks 技巧，若要生成随机数组 给出指定的 行列向量b = np.random.randn(5, 1)print(b)# 这是标准的 5 * 1 的列向量# [[ 0.10087547]#  [-1.2177768 ]#  [ 1.55482844]#  [ 1.39440708]#  [-1.72344715]]print(b.T)# 这是标准的 1 * 5 的行向量# [[ 0.10087547 -1.2177768   1.55482844  1.39440708 -1.72344715]]# 5 *1  乘以 1 *5 得到的是一个矩阵 5*5print(np.dot(b, b.T))# [[ 0.08517485  0.38272589 -0.11342526  0.23506654  0.16852131]#  [ 0.38272589  1.71974596 -0.5096667   1.05625134  0.75723604]#  [-0.11342526 -0.5096667   0.15104565 -0.31303236 -0.2244157 ]#  [ 0.23506654  1.05625134 -0.31303236  0.64873937  0.46508706]#  [ 0.16852131  0.75723604 -0.2244157   0.46508706  0.33342507]]# >>> a = np.mat([[1],[2],[3],[4],[5]])# >>> b = np.mat([[2,2,2,2,2]])# >>> c = np.dot(a,b)# >>> c# matrix([[ 2,  2,  2,  2,  2],#         [ 4,  4,  4,  4,  4],#         [ 6,  6,  6,  6,  6],#         [ 8,  8,  8,  8,  8],#         [10, 10, 10, 10, 10]])